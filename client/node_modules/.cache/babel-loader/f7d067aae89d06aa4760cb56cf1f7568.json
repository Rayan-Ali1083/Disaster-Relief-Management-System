{"ast":null,"code":"'use strict';\n\nconst childProcess = require('child_process');\nconst {\n  isLinux,\n  getReport\n} = require('./process');\nconst command = 'getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true';\nlet commandOut = '';\nconst safeCommand = () => {\n  if (!commandOut) {\n    return new Promise(resolve => {\n      childProcess.exec(command, (err, out) => {\n        commandOut = err ? ' ' : out;\n        resolve(commandOut);\n      });\n    });\n  }\n  return commandOut;\n};\nconst safeCommandSync = () => {\n  if (!commandOut) {\n    try {\n      commandOut = childProcess.execSync(command, {\n        encoding: 'utf8'\n      });\n    } catch (_err) {\n      commandOut = ' ';\n    }\n  }\n  return commandOut;\n};\n\n/**\n * A String constant containing the value `glibc`.\n * @type {string}\n * @public\n */\nconst GLIBC = 'glibc';\n\n/**\n * A String constant containing the value `musl`.\n * @type {string}\n * @public\n */\nconst MUSL = 'musl';\nconst isFileMusl = f => f.includes('libc.musl-') || f.includes('ld-musl-');\nconst familyFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return GLIBC;\n  }\n  if (Array.isArray(report.sharedObjects)) {\n    if (report.sharedObjects.some(isFileMusl)) {\n      return MUSL;\n    }\n  }\n  return null;\n};\nconst familyFromCommand = out => {\n  const [getconf, ldd1] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return GLIBC;\n  }\n  if (ldd1 && ldd1.includes(MUSL)) {\n    return MUSL;\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc family when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst family = async () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromReport();\n    if (!family) {\n      const out = await safeCommand();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Returns the libc family when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst familySync = () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromReport();\n    if (!family) {\n      const out = safeCommandSync();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {Promise<boolean>}\n */\nconst isNonGlibcLinux = async () => isLinux() && (await family()) !== GLIBC;\n\n/**\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {boolean}\n */\nconst isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;\nconst versionFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return report.header.glibcVersionRuntime;\n  }\n  return null;\n};\nconst versionSuffix = s => s.trim().split(/\\s+/)[1];\nconst versionFromCommand = out => {\n  const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return versionSuffix(getconf);\n  }\n  if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\n    return versionSuffix(ldd2);\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc version when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst version = async () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromReport();\n    if (!version) {\n      const out = await safeCommand();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\n\n/**\n * Returns the libc version when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst versionSync = () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromReport();\n    if (!version) {\n      const out = safeCommandSync();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\nmodule.exports = {\n  GLIBC,\n  MUSL,\n  family,\n  familySync,\n  isNonGlibcLinux,\n  isNonGlibcLinuxSync,\n  version,\n  versionSync\n};","map":{"version":3,"names":["childProcess","require","isLinux","getReport","command","commandOut","safeCommand","Promise","resolve","exec","err","out","safeCommandSync","execSync","encoding","_err","GLIBC","MUSL","isFileMusl","f","includes","familyFromReport","report","header","glibcVersionRuntime","Array","isArray","sharedObjects","some","familyFromCommand","getconf","ldd1","split","family","familySync","isNonGlibcLinux","isNonGlibcLinuxSync","versionFromReport","versionSuffix","s","trim","versionFromCommand","ldd2","version","versionSync","module","exports"],"sources":["C:/Users/Dell 9010/Desktop/Disaster Relief Management System/client/node_modules/detect-libc/lib/detect-libc.js"],"sourcesContent":["'use strict';\n\nconst childProcess = require('child_process');\nconst { isLinux, getReport } = require('./process');\n\nconst command = 'getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true';\nlet commandOut = '';\n\nconst safeCommand = () => {\n  if (!commandOut) {\n    return new Promise((resolve) => {\n      childProcess.exec(command, (err, out) => {\n        commandOut = err ? ' ' : out;\n        resolve(commandOut);\n      });\n    });\n  }\n  return commandOut;\n};\n\nconst safeCommandSync = () => {\n  if (!commandOut) {\n    try {\n      commandOut = childProcess.execSync(command, { encoding: 'utf8' });\n    } catch (_err) {\n      commandOut = ' ';\n    }\n  }\n  return commandOut;\n};\n\n/**\n * A String constant containing the value `glibc`.\n * @type {string}\n * @public\n */\nconst GLIBC = 'glibc';\n\n/**\n * A String constant containing the value `musl`.\n * @type {string}\n * @public\n */\nconst MUSL = 'musl';\n\nconst isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-');\n\nconst familyFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return GLIBC;\n  }\n  if (Array.isArray(report.sharedObjects)) {\n    if (report.sharedObjects.some(isFileMusl)) {\n      return MUSL;\n    }\n  }\n  return null;\n};\n\nconst familyFromCommand = (out) => {\n  const [getconf, ldd1] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return GLIBC;\n  }\n  if (ldd1 && ldd1.includes(MUSL)) {\n    return MUSL;\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc family when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst family = async () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromReport();\n    if (!family) {\n      const out = await safeCommand();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Returns the libc family when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst familySync = () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromReport();\n    if (!family) {\n      const out = safeCommandSync();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {Promise<boolean>}\n */\nconst isNonGlibcLinux = async () => isLinux() && await family() !== GLIBC;\n\n/**\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {boolean}\n */\nconst isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;\n\nconst versionFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return report.header.glibcVersionRuntime;\n  }\n  return null;\n};\n\nconst versionSuffix = (s) => s.trim().split(/\\s+/)[1];\n\nconst versionFromCommand = (out) => {\n  const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return versionSuffix(getconf);\n  }\n  if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\n    return versionSuffix(ldd2);\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc version when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst version = async () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromReport();\n    if (!version) {\n      const out = await safeCommand();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\n\n/**\n * Returns the libc version when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst versionSync = () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromReport();\n    if (!version) {\n      const out = safeCommandSync();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\n\nmodule.exports = {\n  GLIBC,\n  MUSL,\n  family,\n  familySync,\n  isNonGlibcLinux,\n  isNonGlibcLinuxSync,\n  version,\n  versionSync\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}