{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nfunction createGetCssVar() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  function appendVar() {\n    for (var _len = arguments.length, vars = new Array(_len), _key = 0; _key < _len; _key++) {\n      vars[_key] = arguments[_key];\n    }\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n  const getCssVar = function (field) {\n    for (var _len2 = arguments.length, fallbacks = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      fallbacks[_key2 - 1] = arguments[_key2];\n    }\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","createGetCssVar","prefix","appendVar","vars","length","match","slice","getCssVar","field","fallbacks"],"sources":["C:/Users/Dell 9010/Desktop/DB and SDA project/project/node_modules/@mui/system/cssVars/createGetCssVar.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nfunction createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n\n    const value = vars[0];\n\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n\n    return `, ${value}`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = (field, ...fallbacks) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n\n  return getCssVar;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,eAAe;;AAEjC;AACA;AACA;AACA;AACA,SAASA,eAAe,GAAc;EAAA,IAAbC,MAAM,uEAAG,EAAE;EAClC,SAASC,SAAS,GAAU;IAAA,kCAANC,IAAI;MAAJA,IAAI;IAAA;IACxB,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE;MAChB,OAAO,EAAE;IACX;IAEA,MAAMN,KAAK,GAAGK,IAAI,CAAC,CAAC,CAAC;IAErB,IAAI,OAAOL,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACO,KAAK,CAAC,6EAA6E,CAAC,EAAE;MAC5H,OAAQ,WAAUJ,MAAM,GAAI,GAAEA,MAAO,GAAE,GAAG,EAAG,GAAEH,KAAM,GAAEI,SAAS,CAAC,GAAGC,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAE,GAAE;IACvF;IAEA,OAAQ,KAAIR,KAAM,EAAC;EACrB,CAAC,CAAC;;EAGF,MAAMS,SAAS,GAAG,UAACC,KAAK,EAAmB;IAAA,mCAAdC,SAAS;MAATA,SAAS;IAAA;IACpC,OAAQ,SAAQR,MAAM,GAAI,GAAEA,MAAO,GAAE,GAAG,EAAG,GAAEO,KAAM,GAAEN,SAAS,CAAC,GAAGO,SAAS,CAAE,GAAE;EACjF,CAAC;EAED,OAAOF,SAAS;AAClB"},"metadata":{},"sourceType":"script"}