{"ast":null,"code":"const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst mysql = require('mysql');\nconst cors = require('cors');\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst db = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: 'fast',\n  database: 'drwms'\n});\napp.use(cors());\napp.use(express.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.post(\"/api/signup\", (req, res) => {\n  //const lname = req.body.lname\n  //const password = req.body.password\n  const user = req.body.user;\n  const sqlRet = \"Select * from users where username = ?\";\n  db.query(sqlRet, user.user_name, (err, result) => {\n    if (err) {\n      console.log(err);\n    }\n    if (result.length > 0) {\n      console.log(result);\n      res.send({\n        message: \"Username already exists\"\n      });\n    } else {\n      bcrypt.hash(user.pass, saltRounds, (err, hash) => {\n        if (err) {\n          console.log(err);\n        }\n        const sqldet = \"Insert into organizations (org_name,org_category,org_contact) VALUES (?,?,?)\";\n        db.query(sqldet, [user.org_name, user.cate, user.email], (err, result) => {\n          console.log(err);\n        });\n        const holder = \"\";\n        const sqlUdet = \"Select Org_id from organizations where org_name = ?\";\n        db.query(sqlUdet, user.org_name, (err, result) => {\n          holder = result.data;\n          console.log(err);\n        });\n        const sqlInsert = \"Insert into users (Username,password,Org_id) VALUES(?,?,?)\";\n        db.query(sqlInsert, [user.user_name, hash, holder], (err, result) => {\n          console.log(err);\n          res.send({\n            message1: \"Successfully Registered\"\n          });\n        });\n      });\n    }\n  });\n});\napp.get(\"/api/orginfo\", (req, res) => {\n  const sqlget = \"Select username from logindet\";\n  db.query(sqlget, (err, result) => {\n    console.log(err);\n    res.send(result);\n  });\n});\napp.get(\"/api/getpending\", (req, res) => {\n  const hold = \"Pending\";\n  const sqlget = \"Select username from logindet where status=?\";\n  db.query(sqlget, hold, (err, result) => {\n    console.log(err);\n    res.send(result);\n  });\n});\napp.post(\"/api/login\", (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const sqlRet = \"Select * from logindet where username = ?\";\n  db.query(sqlRet, username, (err, result) => {\n    if (err) {\n      res.send({\n        err: err\n      });\n    }\n    if (result.length > 0) {\n      bcrypt.compare(password, result[0].pass, (error, response) => {\n        if (response) {\n          res.send(result);\n        } else {\n          res.send({\n            message: \"Wrong username/password combination\"\n          });\n        }\n      });\n    } else {\n      res.send({\n        message: \"User doesn't exist\"\n      });\n    }\n  });\n});\napp.listen(3001, () => {\n  console.log(\"running on port 3001\");\n});","map":{"version":3,"names":["express","require","app","bodyParser","mysql","cors","bcrypt","saltRounds","db","createPool","host","user","password","database","use","json","urlencoded","extended","post","req","res","body","sqlRet","query","user_name","err","result","console","log","length","send","message","hash","pass","sqldet","org_name","cate","email","holder","sqlUdet","data","sqlInsert","message1","get","sqlget","hold","username","compare","error","response","listen"],"sources":["C:/Users/Dell 9010/Desktop/Disaster Relief Management System/client/src/index.js"],"sourcesContent":["const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser')\nconst mysql = require('mysql')\nconst cors = require ('cors')\nconst bcrypt = require('bcrypt');\n\nconst saltRounds = 10\n\n\nconst db = mysql.createPool({\n\n    host:'localhost',\n    user: 'root',\n    password: 'fast',\n    database: 'drwms'\n\n});\n\napp.use(cors());\napp.use(express.json())\napp.use(bodyParser.urlencoded({extended:true}))\n\napp.post(\"/api/signup\", (req,res)=>{\n  \n    //const lname = req.body.lname\n    //const password = req.body.password\n    const user = req.body.user\n    \n    const sqlRet = \"Select * from users where username = ?\";\n    db.query(sqlRet,user.user_name,(err,result)=>{\n        if(err){\n            console.log(err)\n        }\n        if(result.length > 0){\n            console.log(result)\n            res.send({message:\"Username already exists\"});\n        }\n        else{\n            bcrypt.hash(user.pass,saltRounds, (err,hash)=>{\n\n        if(err){\n            console.log(err);\n        }\n\n        const sqldet = \"Insert into organizations (org_name,org_category,org_contact) VALUES (?,?,?)\"\n        db.query(sqldet,[user.org_name,user.cate,user.email],(err,result)=>{\n            console.log(err)\n        })\n        const holder = \"\"\n        const sqlUdet = \"Select Org_id from organizations where org_name = ?\";\n        db.query(sqlUdet,user.org_name,(err,result)=>{\n            holder = result.data\n            console.log(err)\n        })\n\n        const sqlInsert = \n    \"Insert into users (Username,password,Org_id) VALUES(?,?,?)\";\n    db.query(sqlInsert, [user.user_name,hash,holder],(err,result)=>{\n        console.log(err)\n        res.send({message1:\"Successfully Registered\"})\n    }); \n    })\n        }\n    })\n   \n   \n});\n\napp.get(\"/api/orginfo\",(req,res)=>{\n\n    const sqlget = \n    \"Select username from logindet\";\n    db.query(sqlget, (err,result)=>{\n        console.log(err)\n        res.send(result)\n    }); \n})\n\napp.get(\"/api/getpending\",(req,res)=>{\n\n    const hold = \"Pending\";\n    const sqlget = \n    \"Select username from logindet where status=?\";\n    db.query(sqlget,hold, (err,result)=>{\n        console.log(err)\n        res.send(result)\n    }); \n})\n\n\napp.post(\"/api/login\", (req,res)=>{\n\n    const username = req.body.username;\n    const password = req.body.password;\n\n    const sqlRet = \"Select * from logindet where username = ?\";\n    db.query(sqlRet, username,(err,result)=>{\n        if(err){\n            res.send({err:err});\n        }\n        if(result.length > 0){\n            bcrypt.compare(password,result[0].pass,(error,response)=>{\n                if(response){\n                    res.send(result)\n                }else{\n                    res.send({message:\"Wrong username/password combination\"})\n                }\n            })\n        }else{\n            res.send({message:\"User doesn't exist\"})\n        }\n\n    });\n});\n\n\n\n\napp.listen(3001, () => {\n\n    console.log(\"running on port 3001\");\n\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}